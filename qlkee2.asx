QLKA_WIDTH	equ	32
QLKA_HEIGHT	equ	32
LOG2FRAMES	equ	3
SPEED_MASK	equ	7
METER	equ	0

xdl_vbxe	equ	$00000
qlka_vbxe	equ	$00400
bcb_vbxe	equ	qlka_vbxe+QLKA_WIDTH*QLKA_HEIGHT
scr_vbxe	equ	$01000

fx_ptr	equ	$80	; 2
src	equ	$82 ; 2
dest	equ	$84 ; 2
r	equ	$86
g	equ	$87
b	equ	$88
y	equ	$89
hue	equ	$8a
sx	equ	$90	; 8
sy	equ	sx+4
vx	equ	$98	; 8

	org	$3000
main
	jsr	fx_detect
	beq	found_vbxe
	mwa	#no_vbxe_dl	$230
	jmp	*
found_vbxe

	ldy	#$5d	; MEMB
	mva	#$80+[xdl_vbxe>>14]	(fx_ptr),y	; mbce

	mwa	#cls_bcb	src
	jsr	blit

	ldx	#0
	ldy	#63
expand_sin
	lda	sin,x
	sta	sin+256,x
	sta	sin+64,y
	eor	#$ff
	add	#1
	sta	sin+128,x
	sta	sin+192,y
	inx
	dey
	bpl	expand_sin

	ldy	#$53	; BLITTER_BUSY
	lda:rne	(fx_ptr),y

	ldy	#xdl_len-1
	mva:rpl	xdl,y	$4000+[xdl_vbxe&$3fff],y-
	lda	20
	cmp:req	20	; wait for vblank
	ldy	#$40	; VIDEO_CONTROL
	mva	#1	(fx_ptr),y+	; xdl_enabled
	mva	#xdl_vbxe&$ff	(fx_ptr),y+	; XDL_ADR0
	mva	#[xdl_vbxe>>8]&$ff	(fx_ptr),y+	; XDL_ADR1
	mva	#xdl_vbxe>>16	(fx_ptr),y	; XDL_ADR2

	ldx	#15
init_shape	txa:ora	#6
	cmp	#15
	lda	^2a
	scc:and	#SPEED_MASK
	sta	sx,x-
	bpl	init_shape

loop
	ldx	#6
advance_loop
	lda	vx,x
	add:sta	sx,x
	lda	vx+1,x
	adc:sta	sx+1,x
	dex:dex
	bpl	advance_loop

:METER	inc	^1a
	lda	20
	cmp:req	20
:METER	inc	^1a
	mvx	bcb_frame	$4000+[[xdl_vbxe+xdl_frame-xdl]&$3fff]
	and	#[1<<LOG2FRAMES]-1
	sta	bcb_frame
	bne	same_palette

	ldy	#$44
	mva	#0	(fx_ptr),y+	; CSEL
	tax
	mva	#1	(fx_ptr),y	; PSEL
set_palette_1
	txa
	and	#$f
	bne	set_palette_2
	txa
	sub	hue
	tay
	lda	sin,y
	lsr	@
	sta	r
	lda	cos,y
	lsr	@
	sub	sin,y
	lsr	@
	lsr	@
	adc	#48
	sta	g
	lda	cos,y
	eor	#$ff
	lsr	@
	sta	b
set_palette_2
	ldy	#$46	; CR
	clc
set_palette_channel
	lda	r-$46,y
	adc	#$40
	bmi	set_palette_in_range
	lda	#0
	bcc	set_palette_zero
	mva	#$ff	(fx_ptr),y
	bcs	set_palette_next	; jmp
set_palette_in_range
	asl	@
set_palette_zero
	sta	(fx_ptr),y
	lda	#10
	add	r-$46,y
	scs:sta	r-$46,y
set_palette_next
	iny
	cpy	#$49
	bcc	set_palette_channel
	inx
	bne	set_palette_1

same_palette
	mva	#0	bcb_dest
	ldx	sy+1
	lda	sin,x
	ldx	sy+3
	add	sin,x
	ror	@
	lsr	@
	sta	y
	lsr	@
	ror	bcb_dest
	lsr	@
	ror	bcb_dest
	adc	y
	sta	bcb_dest+1

	ldx	sx+1
	lda	sin,x
	ldx	sx+3
	add	sin,x
	ror	@
	add:sta	bcb_dest
	scc:inc	bcb_dest+1
	lda	<scr_vbxe+[192-128-QLKA_HEIGHT]/2*320+[320-256-QLKA_WIDTH]/2
	add:sta	bcb_dest
	lda	>scr_vbxe+[192-128-QLKA_HEIGHT]/2*320+[320-256-QLKA_WIDTH]/2
	adc:sta	bcb_dest+1
	lda	20
:4-LOG2FRAMES	asl	@
	and	#$f0
	sta	hue
:METER	lsr	^1a
	jsr	put_qlka

	jmp	loop

; Detect VBXE
fx_detect
	mwa	#$d600	fx_ptr
	jsr	fx_detect_1
	beq	fx_detect_exit
	inc	fx_ptr+1
fx_detect_1
	ldy	#$40	; CORE_VERSION
	lda	(fx_ptr),y
	cmp	#$10	; FX 1.xx
	bne	fx_detect_exit
	iny	; MINOR_VERSION
	lda	(fx_ptr),y
	and	#$70
	cmp	#$20	; 1.2x
fx_detect_exit
	rts

put_qlka
	mwa	#qlka	src
;	ldy	#$5d	; MEMB
;	mva	#$80+[qlka_vbxe>>14]	(fx_ptr),y
	mwa	#$4000+[qlka_vbxe&$3fff]	dest
	ldy	#0
convert_byte
	lda	(src),y
:4	lsr	@
	jsr	convert_store_pixel
	lda	(src),y
	and	#$f
	jsr	convert_store_pixel
	inw	src
	lda	src
	cmp	<qlka_end
	lda	src+1
	sbc	>qlka_end
	bcc	convert_byte

blit
	ldy	#bcb_len-1
	mva:rpl	(src),y	$4000+[bcb_vbxe&$3fff],y-
	ldy	#$50	; BL_ADR0
	mva	#bcb_vbxe&$ff	(fx_ptr),y+	; BL_ADR0
	mva	#[bcb_vbxe>>8]&$ff	(fx_ptr),y+	; BL_ADR1
	mva	#bcb_vbxe>>16	(fx_ptr),y+	; BL_ADR2
	mva	#1	(fx_ptr),y	; BLITTER_START
	rts

convert_store_pixel
	seq:ora	hue
	sta	(dest),y
	inw	dest
	rts

qlka
	icl	'qlka.asx'
qlka_end
bcb
	dta	a(qlka_vbxe&$ffff),qlka_vbxe>>16
	dta	a(QLKA_WIDTH),1
bcb_dest
	dta	0,0
bcb_frame
	dta	0
	dta	a(320),1
	dta	a(QLKA_WIDTH-1),QLKA_HEIGHT-1
	dta	$ff,0,0
	dta	0,0,1
bcb_len	equ	*-bcb

cls_bcb
	dta	0,0,0
	dta	a(0),0
	dta	a(scr_vbxe),0
	dta	a(256*8),1
	dta	a(256-1),254-1
	dta	0,0,0
	dta	7,0,0

xdl
	dta	a($24),b(23)	; XDLC_OVOFF|XDLC_RTPL
	dta	a($8062),b(191) ; XDLC_GMON|XDLC_RTPL|XDLC_OVADR|XDLC_END
	dta	a(scr_vbxe)
xdl_frame
	dta	b(0),a(320)
xdl_len	equ	*-xdl

no_vbxe_dl
:3	dta	$70
	dta	$47,a(no_vbxe_text)
	dta	$41,a(no_vbxe_dl)

no_vbxe_text
	dta	d'   VBXE REQUIRED!   '

sin
	dta	sin(128,127,256,0,63)
cos
	org	*+256

	run	main
